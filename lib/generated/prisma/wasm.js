
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  employment: 'employment',
  phone: 'phone',
  address: 'address',
  joinDate: 'joinDate',
  salary: 'salary',
  notes: 'notes',
  departmentId: 'departmentId',
  managerId: 'managerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  headId: 'headId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  priority: 'priority',
  status: 'status',
  dueDate: 'dueDate',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  taskId: 'taskId',
  assignedAt: 'assignedAt'
};

exports.Prisma.TaskCommentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.TaskTimeLogScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  durationSeconds: 'durationSeconds'
};

exports.Prisma.AttendanceRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  clockIn: 'clockIn',
  clockOut: 'clockOut',
  status: 'status',
  ipAddress: 'ipAddress',
  location: 'location'
};

exports.Prisma.LeaveScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  startDate: 'startDate',
  endDate: 'endDate',
  reason: 'reason',
  status: 'status',
  approverId: 'approverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  groupId: 'groupId',
  content: 'content',
  timestamp: 'timestamp'
};

exports.Prisma.ChatGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.ChatGroupMemberScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId',
  joinedAt: 'joinedAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  departmentId: 'departmentId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  data: 'data',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  fileUrl: 'fileUrl',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyDocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  fileUrl: 'fileUrl',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  category: 'category',
  amount: 'amount',
  currency: 'currency',
  date: 'date',
  status: 'status',
  receiptUrl: 'receiptUrl',
  submittedAt: 'submittedAt',
  approvedAt: 'approvedAt',
  approvedById: 'approvedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  tag: 'tag',
  name: 'name',
  type: 'type',
  serialNumber: 'serialNumber',
  purchaseDate: 'purchaseDate',
  status: 'status',
  assignedToId: 'assignedToId',
  assignedAt: 'assignedAt',
  location: 'location',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  month: 'month',
  year: 'year',
  baseSalary: 'baseSalary',
  allowances: 'allowances',
  deductions: 'deductions',
  netPay: 'netPay',
  currency: 'currency',
  status: 'status',
  generatedById: 'generatedById',
  generatedAt: 'generatedAt',
  paidAt: 'paidAt',
  slipUrl: 'slipUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PerformanceReviewScalarFieldEnum = {
  id: 'id',
  revieweeId: 'revieweeId',
  reviewerId: 'reviewerId',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  overallScore: 'overallScore',
  kpiScores: 'kpiScores',
  feedback: 'feedback',
  createdAt: 'createdAt'
};

exports.Prisma.JobPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  departmentId: 'departmentId',
  type: 'type',
  location: 'location',
  description: 'description',
  postedById: 'postedById',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  jobPostId: 'jobPostId',
  applicantUserId: 'applicantUserId',
  applicantName: 'applicantName',
  applicantEmail: 'applicantEmail',
  resumeUrl: 'resumeUrl',
  coverLetter: 'coverLetter',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingProgramScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  trainer: 'trainer',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  mode: 'mode',
  maxSeats: 'maxSeats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingEnrollmentScalarFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  userId: 'userId',
  enrolledAt: 'enrolledAt',
  completedAt: 'completedAt',
  certificateUrl: 'certificateUrl'
};

exports.Prisma.CalendarEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  organizerId: 'organizerId',
  startTime: 'startTime',
  endTime: 'endTime',
  source: 'source',
  googleMeetLink: 'googleMeetLink',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarAttendeeScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  response: 'response'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  theme: 'theme',
  locale: 'locale',
  notificationsEnabled: 'notificationsEnabled'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  entity: 'entity',
  entityId: 'entityId',
  action: 'action',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  address: 'address',
  notes: 'notes',
  departmentId: 'departmentId',
  managerId: 'managerId'
};

exports.Prisma.DepartmentOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  headId: 'headId'
};

exports.Prisma.TaskOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  createdById: 'createdById'
};

exports.Prisma.TaskAssignmentOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  taskId: 'taskId'
};

exports.Prisma.TaskCommentOrderByRelevanceFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  content: 'content'
};

exports.Prisma.TaskTimeLogOrderByRelevanceFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId'
};

exports.Prisma.AttendanceRecordOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  location: 'location'
};

exports.Prisma.LeaveOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  reason: 'reason',
  approverId: 'approverId'
};

exports.Prisma.ChatMessageOrderByRelevanceFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  groupId: 'groupId',
  content: 'content'
};

exports.Prisma.ChatGroupOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ChatGroupMemberOrderByRelevanceFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId'
};

exports.Prisma.AnnouncementOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  departmentId: 'departmentId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message'
};

exports.Prisma.DocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  fileUrl: 'fileUrl'
};

exports.Prisma.CompanyDocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  fileUrl: 'fileUrl',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.ExpenseOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  category: 'category',
  currency: 'currency',
  receiptUrl: 'receiptUrl',
  approvedById: 'approvedById'
};

exports.Prisma.AssetOrderByRelevanceFieldEnum = {
  id: 'id',
  tag: 'tag',
  name: 'name',
  type: 'type',
  serialNumber: 'serialNumber',
  assignedToId: 'assignedToId',
  location: 'location',
  notes: 'notes'
};

exports.Prisma.PayrollOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  currency: 'currency',
  generatedById: 'generatedById',
  slipUrl: 'slipUrl'
};

exports.Prisma.PerformanceReviewOrderByRelevanceFieldEnum = {
  id: 'id',
  revieweeId: 'revieweeId',
  reviewerId: 'reviewerId',
  feedback: 'feedback'
};

exports.Prisma.JobPostOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  departmentId: 'departmentId',
  location: 'location',
  description: 'description',
  postedById: 'postedById'
};

exports.Prisma.ApplicationOrderByRelevanceFieldEnum = {
  id: 'id',
  jobPostId: 'jobPostId',
  applicantUserId: 'applicantUserId',
  applicantName: 'applicantName',
  applicantEmail: 'applicantEmail',
  resumeUrl: 'resumeUrl',
  coverLetter: 'coverLetter',
  notes: 'notes'
};

exports.Prisma.TrainingProgramOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  trainer: 'trainer',
  location: 'location',
  mode: 'mode'
};

exports.Prisma.TrainingEnrollmentOrderByRelevanceFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  userId: 'userId',
  certificateUrl: 'certificateUrl'
};

exports.Prisma.CalendarEventOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  organizerId: 'organizerId',
  googleMeetLink: 'googleMeetLink',
  location: 'location'
};

exports.Prisma.CalendarAttendeeOrderByRelevanceFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  response: 'response'
};

exports.Prisma.UserPreferenceOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  theme: 'theme',
  locale: 'locale'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  entity: 'entity',
  entityId: 'entityId',
  action: 'action'
};
exports.Role = exports.$Enums.Role = {
  EMPLOYEE: 'EMPLOYEE',
  MANAGER: 'MANAGER',
  HR: 'HR',
  ADMIN: 'ADMIN'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  TERMINATED: 'TERMINATED'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  OVERDUE: 'OVERDUE'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LEAVE: 'LEAVE'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  GENERAL: 'GENERAL',
  TASK: 'TASK',
  LEAVE: 'LEAVE',
  ATTENDANCE: 'ATTENDANCE',
  PAYROLL: 'PAYROLL',
  EXPENSE: 'EXPENSE',
  ASSET: 'ASSET',
  ANNOUNCEMENT: 'ANNOUNCEMENT',
  CHAT: 'CHAT'
};

exports.ExpenseStatus = exports.$Enums.ExpenseStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.AssetStatus = exports.$Enums.AssetStatus = {
  AVAILABLE: 'AVAILABLE',
  ASSIGNED: 'ASSIGNED',
  MAINTENANCE: 'MAINTENANCE',
  RETIRED: 'RETIRED',
  LOST: 'LOST'
};

exports.PayrollStatus = exports.$Enums.PayrollStatus = {
  DRAFT: 'DRAFT',
  PROCESSED: 'PROCESSED',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED'
};

exports.JobType = exports.$Enums.JobType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  INTERN: 'INTERN',
  CONTRACT: 'CONTRACT'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  APPLIED: 'APPLIED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  OFFERED: 'OFFERED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.TrainingStatus = exports.$Enums.TrainingStatus = {
  PLANNED: 'PLANNED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.EventSource = exports.$Enums.EventSource = {
  INTERNAL: 'INTERNAL',
  GOOGLE: 'GOOGLE',
  OUTLOOK: 'OUTLOOK'
};

exports.Prisma.ModelName = {
  User: 'User',
  Department: 'Department',
  Task: 'Task',
  TaskAssignment: 'TaskAssignment',
  TaskComment: 'TaskComment',
  TaskTimeLog: 'TaskTimeLog',
  AttendanceRecord: 'AttendanceRecord',
  Leave: 'Leave',
  ChatMessage: 'ChatMessage',
  ChatGroup: 'ChatGroup',
  ChatGroupMember: 'ChatGroupMember',
  Announcement: 'Announcement',
  Notification: 'Notification',
  Document: 'Document',
  CompanyDocument: 'CompanyDocument',
  Expense: 'Expense',
  Asset: 'Asset',
  Payroll: 'Payroll',
  PerformanceReview: 'PerformanceReview',
  JobPost: 'JobPost',
  Application: 'Application',
  TrainingProgram: 'TrainingProgram',
  TrainingEnrollment: 'TrainingEnrollment',
  CalendarEvent: 'CalendarEvent',
  CalendarAttendee: 'CalendarAttendee',
  UserPreference: 'UserPreference',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
